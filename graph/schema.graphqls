# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

scalar Time
scalar UUID
scalar Decimal
scalar Precision

type GeneratedDummy {
  name: String!
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
}

type LoginInfo {
  token: String!
  userId: Int!
  username: String!
  name: String!
  email: String
  phone: String
  imageUrl: String!
  modules: [AllowedModule!]!
}

type AllowedModule {
  moduleName: String!
  allowedActions: String!
}

type UsersConnection {
  edges: [UsersEdge!]!
  pageInfo: PageInfo!
}

type UsersEdge {
  cursor: String!
  node: User
}

type User {
  id: ID!
  username: String!
  name: String!
  email: String
  phone: String
  mobile: String
  imageUrl: String
  isActive: Boolean!
  roleId: Int
  role: Role
  createdAt: Time
  updatedAt: Time
}

input NewUser {
  username: String!
  name: String!
  email: String
  phone: String
  mobile: String
  imageUrl: String
  isActive: Boolean!
  password: String!
  roleId: Int
}

type Role {
  id: ID!
  name: String!
  roleModules: [RoleModule] @goField(forceResolver: true)
  createdAt: Time
  updatedAt: Time
}

input NewRole {
  name: String!
  allowedModules: [NewAllowedModule]
}

input NewAllowedModule {
  moduleId: ID!
  allowedActions: String!
}

input NewRoleModule {
  roleId: ID!
  moduleId: ID!
  allowedActions: String!
}

type RoleModule {
  role: Role! @goField(forceResolver: true)
  module: Module! @goField(forceResolver: true)
  allowedActions: String!
  createdAt: Time
  updatedAt: Time
}

type Module {
  id: ID!
  name: String!
  actions: String!
  createdAt: Time
  updatedAt: Time
}

input NewModule {
  name: String!
  actions: String!
}

type UnitsConnection {
  edges: [UnitsEdge!]!
  pageInfo: PageInfo!
}

type UnitsEdge {
  cursor: String!
  node: Unit
}

type Unit {
  id: ID!
  name: String!
  abbreviation: String!
  precision: Precision!
  isActive: Boolean!
  createdAt: Time
  updatedAt: Time
}

input NewUnit {
  name: String!
  abbreviation: String!
  precision: Precision!
}

type Category {
  id: ID!
  name: String!
  parentCategory: Category!
  isActive: Boolean!
  createdAt: Time
  updatedAt: Time
}

input NewCategory {
  name: String!
  parentCategoryId: Int
}

type CategoriesConnection {
  edges: [CategoriesEdge!]!
  pageInfo: PageInfo!
}

type CategoriesEdge {
  cursor: String!
  node: Category
}

type Query {
  getUser(id: ID!): User! @goField(forceResolver: true) @auth

  getUsers(
    name: String
    phone: String
    mobile: String
    email: String
    isActive: Boolean
  ): [User] @goField(forceResolver: true) @auth

  paginateUser(
    limit: Int = 10
    after: String
    name: String
    phone: String
    mobile: String
    email: String
    isActive: Boolean
  ): UsersConnection @goField(forceResolver: true) @auth

  #module
  getModule(id: ID!): Module! @goField(forceResolver: true) @auth
  getModules(name: String): [Module] @goField(forceResolver: true) @auth

  # role
  getRole(id: ID!): Role! @goField(forceResolver: true) @auth
  getRoles(name: String): [Role] @goField(forceResolver: true) @auth
  listRoleModule(roleId: ID): [RoleModule] @goField(forceResolver: true) @auth

  # Unit
  getUnit(id: ID!): Unit! @goField(forceResolver: true) @auth
  getUnits(name: String): [Unit] @goField(forceResolver: true) @auth
  paginateUnit(limit: Int = 10, after: String, name: String): UnitsConnection
    @goField(forceResolver: true)
    @auth

  # Category
  getCategory(id: ID!): Category! @goField(forceResolver: true) @auth
  getCategories(name: String): [Category] @goField(forceResolver: true) @auth
  paginateCategory(
    limit: Int = 10
    after: String
    name: String
    parentCategoryId: Int
  ): CategoriesConnection @goField(forceResolver: true) @auth
}

type Mutation {
  register(input: NewUser!): User!
  login(username: String!, password: String!): LoginInfo!
    @goField(forceResolver: true)
  logout: Boolean! @goField(forceResolver: true) @auth

  #user module

  createUser(input: NewUser!): User! @goField(forceResolver: true) @auth
  updateUser(id: ID!, input: NewUser!): User!
    @goField(forceResolver: true)
    @auth
  deleteUser(userId: ID!): User! @goField(forceResolver: true) @auth
  changePassword(oldPassword: String!, newPassword: String!): User!
    @goField(forceResolver: true)
    @auth

  #role module
  createRole(input: NewRole!): Role! @goField(forceResolver: true) @auth
  updateRole(id: ID!, input: NewRole!): Role!
    @goField(forceResolver: true)
    @auth
  deleteRole(id: ID!): Role! @goField(forceResolver: true) @auth

  #module
  createModule(input: NewModule!): Module! @goField(forceResolver: true) @auth
  updateModule(id: ID!, input: NewModule!): Module!
    @goField(forceResolver: true)
    @auth
  deleteModule(id: ID!): Module! @goField(forceResolver: true) @auth

  #Unit
  createUnit(input: NewUnit!): Unit! @goField(forceResolver: true) @auth
  updateUnit(id: ID!, input: NewUnit!): Unit!
    @goField(forceResolver: true)
    @auth
  deleteUnit(id: ID!): Unit! @goField(forceResolver: true) @auth
  toggleActiveUnit(id: ID!, isActive: Boolean!): Unit!
    @goField(forceResolver: true)
    @auth

  #Category
  createCategory(input: NewCategory!): Category!
    @goField(forceResolver: true)
    @auth
  updateCategory(id: ID!, input: NewCategory!): Category!
    @goField(forceResolver: true)
    @auth
  deleteCategory(id: ID!): Category! @goField(forceResolver: true) @auth
  toggleActiveCategory(id: ID!, isActive: Boolean!): Category!
    @goField(forceResolver: true)
    @auth
}
